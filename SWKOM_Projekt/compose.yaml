version: '3.8'

services:
  server:
    container_name: DocumentsREST
    build:
      context: .
      dockerfile: DocumentsREST/Dockerfile
      target: final
    ports:
      - 8081:8081
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8081
      - ConnectionStrings__DefaultConnection=Host=db;Database=DocumentsDB;Username=postgres;Password=postgres
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - documents-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
  
  db:
    container_name: DocumentsDB
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: DocumentsDB
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./dbinit:/docker-entrypoint-initdb.d
    networks:
      - documents-network

  webui:
    container_name: DocumentsWebUI
    image: webui
    build:
      context: .
      dockerfile: WebUI/Dockerfile
    ports:
      - 80:80
    volumes:
      - ./WebUI/nginx.conf:/etc/nginx/nginx.conf
      - ./WebUI/wwwroot:/app/wwwroot
    depends_on:
      - server
    networks:
      - documents-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: DocumentsRabbitMQ
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - documents-network

  ocr_worker:
    image: ocr_worker
    container_name: DocumentsOCRWorker
    build:
      context: .
      dockerfile: OCRWorker/Dockerfile
    depends_on:
      - rabbitmq
    networks:
      - documents-network
    volumes:
      - ./uploads:/app/uploads

  minio:
    image: minio/minio
    container_name: DocumentsMinIO
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000  # MinIO API port
      - 9001:9001  # MinIO Console port
    environment:
      MINIO_ROOT_USER: minioadmin  # Replace with a secure username
      MINIO_ROOT_PASSWORD: minioadmin  # Replace with a secure password
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - documents-network

# Volumes for persistent data
volumes:
  postgres-data:
  minio-data:  # Persistent storage for MinIO

# Network for internal communication between services
networks:
  documents-network:
    driver: bridge
