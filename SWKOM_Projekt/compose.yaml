version: '3.8'  # Specify Docker Compose file version

services:
  server:
    container_name: DocumentsREST
    build:
      context: .
      dockerfile: DocumentsREST/Dockerfile
      target: final
    ports:
      - 8081:8081
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8081
      - ConnectionStrings__DefaultConnection=Host=db;Database=DocumentsDB;Username=postgres;Password=postgres  # Connection string to the PostgreSQL database
    depends_on:
      db:
        condition: service_healthy  # Wait for the database service to be ready before starting
    networks:
      - documents-network  # Ensure communication between server and db
    volumes:
      - ./logs:/app/logs  # Mount the logs directory
      - ./uploads:/app/uploads  # Mount the uploads directory
  
  db:
    container_name: DocumentsDB
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: DocumentsDB
    ports:
      - 5432:5432  # Expose PostgreSQL port
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]  # Check PostgreSQL health
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data  # Persist PostgreSQL data across container restarts
      - ./dbinit:/docker-entrypoint-initdb.d  # Mount the init.sql and run-init.sh scripts
    networks:
      - documents-network  # Connect to the shared network

  webui:
    container_name: DocumentsWebUI
    image: webui
    build:
      context: .
      dockerfile: WebUI/Dockerfile
    ports:
      - 80:80  # Expose port 80 for the web UI
    volumes:
      - ./WebUI/nginx.conf:/etc/nginx/nginx.conf  # Mount nginx configuration
      - ./WebUI/wwwroot:/app/wwwroot  # Mount the static web files
    depends_on:
      - server  # Ensure the server is up before starting the web UI
    networks:
      - documents-network  # Ensure communication with server
  rabbitmq:
    image: rabbitmq:3-management
    container_name: DocumentsRabbitMQ
    ports:
      - 15672:15672  # Expose RabbitMQ management port
      - 5672:5672  # Expose RabbitMQ port
    environment:
        RABBITMQ_DEFAULT_USER: admin
        RABBITMQ_DEFAULT_PASS: admin
    networks:
        - documents-network  # Ensure communication between services
  ocr_worker:
    image: ocr_worker
    container_name: DocumentsOCRWorker
    build:
      context: .
      dockerfile: OCRWorker/Dockerfile
    depends_on:
        - rabbitmq  # Ensure RabbitMQ is up before starting the OCR worker
    networks:
        - documents-network  # Ensure communication with RabbitMQ
    volumes:
        - ./uploads:/app/uploads  # Mount the uploads directory
        

# Volumes for persistent data
volumes:
  postgres-data:  # PostgreSQL data persistence

# Network for internal communication between services
networks:
  documents-network:
    driver: bridge
